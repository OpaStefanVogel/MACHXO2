0 VARIABLE INT14COUNT
: INT14 1 INT14COUNT +! ;
' INT14 4000 + 14 !
INT14COUNT ?
( fuer RxD-Messung:
: INT14
    1 INT14COUNT +!
    UHRL 2@ HERE INT14COUNT @ DUP + FF AND + 2!
  ;
' INT14 4000 + 14 !
( fuer SPI
: INT14
    1 INT14COUNT +!
  ;
' INT14 4000 + 14 !
( anzuwenden als
( HERE 100 0 FILL
( dann Taste A drücken
( HERE 100 DUMP
( 257F 23BB - . ( 1C4 ok

INT14

3 2D2F ! ( FPROP 
0 2D11 ! ( INV_FINTI
0000 2C1D ! ( DREIPHASENBIT
FFFF 2D18 ! ( XAMP
0019 2D1A ! ( PW_FREQUENZ

( D016 ? INT14COUNT ?
( 1 2C00 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?
( 1 2C01 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?
( 0 2C00 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?
( 0 2C01 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?

( 1 2C02 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?
( 0 2C02 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?

( 1 2C03 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?
( 0 2C03 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?

( 1 2C01 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?
( 1 2C00 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?
( 0 2C01 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?
( 0 2C00 ! D01A ? D014 ? D018 ? D016 ? INT14COUNT ?

( BIT0<='0' hat gefehlt




( aus QUELLTEXTNEUMITFAV
: ST ( <name>  wert adresse --> ) CONSTANT HERE 1 - @ ! ;
   0 2C15 ST NOTAUSBIT
   0 2C1D ST DREIPHASENBIT
   0 2C21 ST DREIPHASENBITY
FFFF 2D17 ST INV_FINT
FFFF 2D18 ST AMP1
FFFF 2D19 ST AMP2
0019 2D1A ST PW_FREQUENZ
0600 2D2A ST VMAX2
012C 2D2C ST VMAX ( mehr erstmal nicht, sonst tuckern gerade Strecken
0064 2D2D ST BESCHL
0032 2D2E ST VANF
0300 2D2F ST FPROP
D014 CONSTANT POSDET1
( D018 CONSTANT SOLLWERT1 ( schon oben
D020 CONSTANT POSDET2
( D02A CONSTANT SOLLWERT2 ( schon oben
D01A CONSTANT STELLX ( Stellwert ablesen
E00D CONSTANT INDEX1



0 VARIABLE LICHTBIT
0 VARIABLE FINT
2C1C CONSTANT PAUSENBIT 0 PAUSENBIT !
0 VARIABLE BILDNUMMER
D018 CONSTANT SOLLWERT1
D02A CONSTANT SOLLWERT2
(   0 2C1D ST DREIPHASENBIT
(   0 2C21 ST DREIPHASENBITY
2C1D CONSTANT DREIPHASENBIT
2C21 CONSTANT DREIPHASENBITY

( also brauchen tue ich für WEBSOCKET
: ARQ
." <?xml version='1.0' encoding='utf-8' ?>"
." <?xml-stylesheet type='text/css' href='AJAX_REQUEST.css' ?>
." <LESEDATEN>"
." <LICHTBIT>" LICHTBIT @ 1 AND 30 + EMIT ." </LICHTBIT> "
." <PAUSENBIT>" PAUSENBIT @ 1 AND 30 + EMIT ." </PAUSENBIT> "
." <TAKT>" UHRL 2 + @ HG. UHRL 2@ SWAP HG. HG. ." </TAKT> "
." <BILDNUMMER>" BILDNUMMER @ HG. ." </BILDNUMMER> "
." <PIXELDECODER>"
." <SOLL_X>" SOLLWERT1 2@ SWAP HG. HG. ." </SOLL_X> "
." <SOLL_Y>" SOLLWERT2 2@ SWAP HG. HG. ." </SOLL_Y> "
." <SOLL_V>" D02C @ HG. ." </SOLL_V> "
." <STIFT>" D10E @ HG. ." </STIFT> "
." <VANF>" 2D2E @ HG. ." </VANF> "
." <VMAX>" 2D2C @ HG. ." </VMAX> "
." <VMAX2>" 2D2A @ HG. ." </VMAX2> "
." <BESCHL>" 2D2D @ HG. ." </BESCHL> "
." </PIXELDECODER> " 
." <PID>"
." <FINT>" FINT @ HG. ." </FINT> "
." <FPROP>" 2D2F @ HG. ." </FPROP> "
." <IST_X>" D014 @ HG. ." </IST_X> "
." <IST_Y>" D020 @ HG. ." </IST_Y> "
." </PID>"
." <PWM>"
." <PW_FREQUENZ>" 2D1A @ HG. ." </PW_FREQUENZ> "
." <DREIPHASENBIT_X>" DREIPHASENBIT @ HG. ." </DREIPHASENBIT_X> "
." <AMP_X>" 2D18 @ HG. ." </AMP_X> "
." <DREIPHASENBIT_Y>" DREIPHASENBITY @ HG. ." </DREIPHASENBIT_Y> "
." <AMP_Y>" 2D19 @ HG. ." </AMP_Y> "
." </PWM> "
." <PORT> 100 PORTSCA 20 EMIT 100 L 20 EMIT DROP 100 L 20 EMIT DROP 100 L 20 EMIT DROP 100 L 20 EMIT DROP 100 L 20 EMIT DROP DROP </PORT>"
." </LESEDATEN>"
  ; HERE . BZEIG ?

( aktuell neu:
REPLACE: FILETYPE
  ENABLE_CONF
  BEGIN UFM_CHECK_BUSY_FLAG 0= UNTIL
  RESET_UFM_ADRESS
  80 70 W! CA 71 W! 10 71 W! 00 71 W! 00 71 W! ( 1
  W@ W@ 100 * + FILELAENGE !
  00 70 W!
  BEGIN UFM_CHECK_BUSY_FLAG 0= UNTIL
  
  0 1 SET_ADRESS ( war erst RESET_UFM_ADRESS
  80 70 W! 
  CA 71 W! 10 71 W! 
  FILELAENGE @ 20 + 100 / 71 W! 
  FILELAENGE @ 20 + 10 / 00FF AND 71 W! ( 1+x
  10 0000 DO W@ DROP LOOP 
  FILELAENGE @ 1 - 0000 DO ( 1 - wegen "§"
    W@ 
    DUP C2 ( "§" ) = IF DROP W@ DROP ARQ ELSE EMIT END_IF
    LOOP 
  00 70 W!
  DISABLE_CONF
  UFM_BYPASS
  ;

( wieder alle SOCKET's
: WIZ_RESPONSE3
( SOCKET_VAR_ADR @ IF
  0028 SOCKET_VAR_RECH LL WIZ_RX_VON !
  002A SOCKET_VAR_RECH LL WIZ_RX_BIS !
  WIZ_RX_VON @ WIZ_RX_BIS @ - IF
    1 WIZ_COUNTER +!
    SOCKET_VAR_ADR @ 100 = IF ( bei UDP muss MAC gefuellt werden
      WIZ_RX_VON @ SOCKET_RX_RECH LL 000C SOCKET_VAR_RECH MM 2 WIZ_RX_VON +!
      WIZ_RX_VON @ SOCKET_RX_RECH LL 000E SOCKET_VAR_RECH MM 2 WIZ_RX_VON +!
      WIZ_RX_VON @ SOCKET_RX_RECH LL 0010 SOCKET_VAR_RECH MM 2 WIZ_RX_VON +!
      2 WIZ_RX_VON +!
      END_IF
    
    ( WIZ nur auslesen
    F400 WIZ_BUF !
    WIZ_RX_VON @
    BEGIN 
      WIZ_RX_VON @ SOCKET_RX_RECH L WIZ_BUF @ C!
      1 WIZ_RX_VON +! 1 WIZ_BUF +!
      WIZ_RX_VON @ WIZ_RX_BIS @ = UNTIL
    WIZ_RX_VON !
    WIZ_RX_BIS @ 0028 SOCKET_VAR_RECH MM ( warum das nicht geht
    40 0001 SOCKET_VAR_RECH M
    
    ( ab hier antworten
    SOCKET_VAR_ADR @ 0 = IF MACRAWSEND ELSE
      F400 WIZ_BUF @ F400 - 
      ( CR 2DUP B.
      ( CR 2DUP DUMP
      CAP @ 1 AND IF CR 2DUP TYPE END_IF
      SOCKET_VAR_ADR @ 100 = IF
        WIZ_TYPE_INTERPRET ( nur hier WIZ_OPEN ... WIZ_SEND )
        ELSE WIZ_TYPE_INTERPRET END_IF ( hier nochmal GET neu )
      END_IF
    
    END_IF
( END_IF
  ; HERE . BZEIG ? TLISTENZEIGER ?

REPLACE: WIZ_RESPONSE WIZ_RESPONSE3 ;
