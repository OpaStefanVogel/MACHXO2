( INIT1 von Zeile 21 bis ca. Zeile 423 bei START:
( wenn unverändert, dann nur 1x laden
( wenn verändert, dann
  ( zuerst RESET und 1x das alte INIT1Pxx laden (um REPLACE: rückgängig zu machen)
  ( zuerst RESET und 1x das alte INIT1Pxx laden (um REPLACE: rückgängig zu machen)
  (   : und dann so das neue INIT1Pxx laden:
  (   HERE 100 + DPMERK ! E800 BANF !
  (   2x neues INIT1Pxx laden
  (   058 DPMERK ! E000 BANF !
  (   nochmal 2x neues INIT1Pxx laden
( danach INIT2Pxx ab Zeile 424 laden und die weiteren...
( HERE 2400 OVER - 0 FILL
( BZEIG @ 4000 OVER - 0 FILL
( logfile-->Pxxlog.txt
( und schließlich DUMPY
( SPOOL.TXT-->Pxx.vhd

( -1 2C23 ! ( schaltet RX_ aus !!!
DPMERK @ DP ! BANF @ BZEIG ! -1 CRBIT ! 8000 6 ! ( 1B EMIT 63 EMIT 

( Forth Axiome:
IMMEDIATE: ( 29 WORD 2DROP ;
IMMEDIATE: [ 0 STAT ! ;
: ] 1 STAT ! ;
IMMEDIATE: COMPILE 20 WORD FIND LCFA DROP COMPILE, ;
COMPILE: (LIT,) R> DUP 1+ >R @ ;
: LIT, ( a --> ) DUP 3FFF > OVER C000 < OR IF COMPILE (LIT,) END_IF , ;
COMPILE: (CONSTANT:) R> @ STAT @ IF LIT, END_IF ;
: CONSTANT ( <name>  c --> ) CREATE COMPILE (CONSTANT:) , SMUDGE ;
D001 CONSTANT SP
D002 CONSTANT RP
D003 CONSTANT PC

40 CONSTANT RBIT
41 CONSTANT SMUDGEBIT
42 CONSTANT RP0 3000 RP0 !
( 43 CONSTANT IRAMADR ( neu ( D800 43 !
( 44 CONSTANT JRAMADR ( neu ( D800 44 !

48 CONSTANT BASE ( 10 BASE !
49 CONSTANT TIB ( 3F00 TIB !
4A CONSTANT IN1
4B CONSTANT IN2
4C CONSTANT IN3
4D CONSTANT IN4
4E CONSTANT ERRORNR 0 ERRORNR !
4F CONSTANT DP
50 CONSTANT STAT 0 STAT !
51 CONSTANT LFA


52 CONSTANT BANF ( 3800 BANF !
53 CONSTANT BZEIG
54 CONSTANT DPMERK ( 056 DPMERK !
55 CONSTANT CSP
56 CONSTANT CRBIT -1 CRBIT !
57 CONSTANT LOCALADDR

VERSION 1+ CONSTANT VERSION VERSION .

( der neue Maschinencode:
A003 CONSTANT RETURN
COMPILE: (MCODE:) R> STAT @ IF @ , ELSE EXECUTE END_IF ;
: MCODE CREATE COMPILE (MCODE:) , RETURN , SMUDGE ;

A000 MCODE MINUS
A001 MCODE U+
A002 MCODE U*
A00D MCODE 0=
A00F MCODE 0<
A005 MCODE EMITCODE
A00B MCODE NOT
A008 MCODE AND
A00E MCODE OR
A00C MCODE KEYCODE
A007 MCODE +
A009 MCODE !
A00A MCODE @
B412 MCODE SWAP
B502 MCODE OVER
B501 MCODE DUP
B434 MCODE ROT
B300 MCODE DROP
B43C MCODE 2SWAP
B60C MCODE 2OVER
B603 MCODE 2DUP
B200 MCODE 2DROP
8000 MCODE NOOP

( - ein Abschnitt für die Zeichenketten )
: B, ( b --> ) BZEIG @ ! 1 BZEIG +! ;
: Z, ( badr n --> ) BZEIG @ LIT, DUP ,
  BEGIN SWAP DUP @ B, 1+ SWAP 1 - DUP 0= UNTIL
  2DROP 20 B, ; 
COMPILE: (WORD:) WORD STAT @ IF Z, R> COMPILE, END_IF ;
: WORD: CREATE 1 STAT ! , COMPILE (WORD:) -1 CSP +! ;
22 WORD: " NOOP ; ( das NOOP ist wohl wegen READ_BEVORE_WRITE RAM )
22 WORD: ." TYPE ;


( weiter mit Programmstrukturen
: HERE DP @ ;
: JRBIT 8 ;
: JR0BIT 9 ;
: XSETBT 1000 * SWAP 0FFF AND OR ;
: ALLOT DP +! ;
: BRANCH, HERE 1+ - JRBIT XSETBT , ;
: 0BRANCH, HERE 1+ - JR0BIT XSETBT , ;
IMMEDIATE: BEGIN HERE ;
IMMEDIATE: AGAIN BRANCH, ;
IMMEDIATE: UNTIL 0BRANCH, ;
IMMEDIATE: IF JR0BIT 1 ALLOT HERE ;
IMMEDIATE: END_IF HERE OVER - ROT XSETBT SWAP 1 - ! ;
IMMEDIATE: ELSE 1 ALLOT COMPILE END_IF JRBIT HERE ;
IMMEDIATE: WHILE COMPILE IF ;
IMMEDIATE: REPEAT ROT COMPILE AGAIN COMPILE END_IF ;



( - einige kleinere Funktionen
: C@ @ ;
: C! ! ;
: 1+ ( a --> a+1 ) 1 + ;
: - MINUS + ;
: = - 0= ;
: < ( a b --> r ) 8000 + SWAP NOT 8000 + 0 U+ DROP 0= NOT ;
: > ( a b --> r ) SWAP < ;
: * ( a b --> a*b ) 0 ROT ROT U* SWAP DROP ;
: BYE BEGIN ." BYE " AGAIN ;
: +! ( a adr --> adr+1 ) SWAP OVER @ + SWAP ! ;
: R> RP @ 1+ @ RP @ @ RP @ 1+ DUP RP ! ! NOOP ; ( NOOP wegen RP ! vor ;
: >R RP @ @ SWAP RP @ ! -1 RP @ + DUP RP ! ! NOOP ; ( ebenso 
: R RP @ 1+ @ ;
: , DP @ ! 1 DP +! ;
: EXECUTE PC ! ;
: KEY 2 EXECUTE ;
: EMIT ' EMITCODE EXECUTE ;
: SHL16 ( a --> t a' )
  0 SWAP 10 U* SWAP ; ( t&a'=SHL a )
: DIG ( n --> c )
  DUP 0A < IF ELSE 7 + END_IF 30 + ;
: TYPE
  BEGIN DUP WHILE
    SWAP DUP C@ EMIT 1+
    SWAP 1 - REPEAT
  2DROP ;
: HG. SHL16 DIG EMIT SHL16 DIG EMIT SHL16 DIG EMIT
  SHL16 DIG EMIT DROP ;
: H. HG. 20 EMIT ;
: . H. ;
: ? @ . ;
: CR 0A EMIT CRBIT @ IF HERE . BZEIG @ . END_IF ;
: FEHLERTEXT ( n --> n ) ;
: DISABLE 
  CR ." weiter nach Taste ESCAPE oder ^Q(cutecom)"
  BEGIN NOOP NOOP NOOP NOOP KEY DUP 1B = SWAP 11 = OR UNTIL ; 
: ERROR
  DUP ERRORNR !
  0 STAT !
  CR IN1 @ IN3 @ IN1 @ - 1 - TYPE ." ???"
  " FEHLERTEXT" INTERPRET
  CR ." ERROR - Fehler Nummer " . 
  DISABLE QUIT ;
: CSP! SP @ CSP ! ;
: CSP? SP @ CSP @ - IF 9 ERROR END_IF ;

(
: LOCAL ( n --> )
  R> SWAP 
  DUP MINUS RP @ + RP !
  RP @ LOCALADDR @
  >R LOCALADDR !
  >R ( LOCALDIST )
  >R ;
: END_LOCAL
  R>
  R> ( LOCALDIST )
  R> LOCALADDR ! 
  RP @ + RP !
  >R ;  
: L0 LOCALADDR @ ;
: L1 LOCALADDR @ 1+ ;
: L2 LOCALADDR @ 2 + ;
: L3 LOCALADDR @ 3 + ;
: L4 LOCALADDR @ 4 + ;
: L5 LOCALADDR @ 5 + ;
: L6 LOCALADDR @ 6 + ;
: L7 LOCALADDR @ 7 + ;


( KEY
-1 CRBIT !
IMMEDIATE: ' ( <NAME> --> --> pfa ) 
  20 WORD FIND LCFA DROP 1+ STAT @ IF LIT, END_IF ; 

( - neu: KEY_INT, ersetzt Code auf Adressen 0018 bis 003D
43 CONSTANT IRAMADR ( 2400 43 !
44 CONSTANT JRAMADR ( 2400 44 !
45 CONSTANT XOFF

: INCR4 ( adr --> )
  DUP @ 1 +
  DUP 3FF AND 000 = IF 400 - END_IF 
  SWAP !
  ;
: KEY_INT ( --> )
  D000 @ 
  DUP 08 < IF 
    8 + @ DUP IF DUP EXECUTE END_IF
    DROP
    ELSE
      IRAMADR @ ! 
      IRAMADR INCR4
      IRAMADR @ JRAMADR @ - 3FF AND 
      100 > IF XOFF @ 0= IF -1 XOFF ! 13 EMIT END_IF ( 1 D000 ! ) END_IF 
      END_IF
  ;
: KEYCODE2 ( --> c f )
  JRAMADR @ IRAMADR @ = IF 0 0 
    ELSE JRAMADR @ @ -1
    JRAMADR INCR4
    IRAMADR @ JRAMADR @ - 3FF AND
    80 < IF XOFF @ IF 0 XOFF ! 11 EMIT END_IF ( 0 D000 ! ) END_IF
    END_IF
  ;
' KEY_INT 4000 + 16 !
' KEYCODE2 4000 + 2 !





( - es folgt der Interpreter:
( neu ESCAPE durch EXPECT durchlaufen lassen und 7F-->08:
( und 7F in 08 umwandeln:
( und nach n Zeichen kein 0D mehr lesen
: EXPECT ( <text>  adr n --> adr m )
  5 LOCAL
  L2 ! L1 ! L1 @ L4 !
  BEGIN
    KEY
    DUP 14 ( 20 ) ( =^T, ^R=18 ) = IF 
      DROP L1 @ C@ END_IF
    DUP 7F = IF DROP 08 END_IF
    DUP 08 = IF L4 @ L1 @ < IF
      -1 L1 +!
      1 L2 +!
      8 EMIT 20 ( 32 ) EMIT 8 EMIT
      END_IF END_IF
(    DUP 20 ( 32 ] < NOT OVER 08 = OR OVER 1B = OR L2 @ 0= NOT AND WHILE
      DUP 20 < IF ( DROP ) ELSE
        -1 L2 +!
        L2 @ 0< IF 6 ERROR END_IF
        DUP EMIT
        DUP L1 @ C! 1 L1 +!
        END_IF 
    DUP 20 < OVER 08 = NOT AND SWAP 1B = NOT AND L2 @ 0= OR UNTIL
(      REPEAT
  20 ( 32 ) EMIT
  L4 @ L1 @ L4 @ -
  2DUP + 0 SWAP C!
  END_LOCAL
  ;


: DIGIT ( z --> d r ) ( r=-1 wenn gueltig
  ( vorher r=0 wenn gueltig!!!
  DUP 30 ( 30 48 ) < NOT OVER 3A ( 3A 58 ) < AND
  OVER 41 ( 41 65 ) < NOT OR 
  DUP IF ( z -1 wenn gueltig
    SWAP 30 ( 30 48 ) -
    DUP 0A < NOT IF 7 - END_IF
    DUP BASE @ < NOT IF DROP DROP 0 0 END_IF
    SWAP END_IF ;

: NUMBER ( badr n --> a r )
  7 LOCAL ( L3 L4 nicht verwendet
  L1 ! L0 !
  0 L1 @ IF
    DUP L2 ! 1 L5 ! ( Vorzeichen )
    BEGIN ( M23 Vorzeichen gucken )
      -1 L6 ! 
      L0 @ L2 @ + C@
      2B ( 43 2B ) = IF L2 @ 1+ L2 ! 0 L6 ! ELSE
        L0 @ L2 @ + C@
        2D ( 45 2D ) = IF L2 @ 1+ L2 !
          0 L6 !
          L5 @ MINUS L5 ! END_IF
        END_IF
      L6 @ UNTIL
    L2 @ L1 @ < IF
      BEGIN
        L0 @ L2 @ + C@
        DUP IF ( oo L1 auf Bytes )
          DIGIT NOT IF DROP L1 @ MINUS L1 ! ELSE
            SWAP BASE @ * +
            L2 @ 1+ L2 ! 
            END_IF
          ELSE DROP L2 @ L1 ! END_IF
        L2 @ L1 @ < NOT UNTIL
      END_IF ( M19 )
    END_IF ( M19 )
  L5 @ 0< IF MINUS END_IF
  L2 @ L1 @ - ( oo noch kein fadr )
  END_LOCAL
  ;

: WORD ( b --> adr n )
  >R
  IN3 @ IN2 !
  BEGIN 
    IN3 @ C@ R = IN3 @ IN4 @ < AND WHILE
      1 IN3 +! REPEAT
  IN3 @ IN2 !
  BEGIN 
    IN3 @ C@ R = NOT IN3 @ IN4 @ < AND WHILE
      1 IN3 +! REPEAT
  IN2 @ IN3 @ OVER -
  DUP IF 1 IN3 +! END_IF
  R> DROP
  ;

: Z= ( adr1 n1 adr2 n2 --> r )
  >R OVER R - IF R> DROP DROP DROP DROP 0 ELSE
    R> DROP SWAP 0 BEGIN 2DUP - WHILE >R >R
      OVER C@ OVER C@ - IF DROP DROP 0 0 END_IF
      DUP IF 1+ SWAP 1+ SWAP END_IF
      R> R> 1+ REPEAT 2DROP ( neu bei 16 BIT ohne DO LOOP)
    DROP IF -1 ELSE 0 END_IF
    END_IF ;
( : Z= DROP SWAP DROP SWAP @ SWAP @ = ;

: FIND ( adr n --> lfa r )
  >R >R 0 ( heisst noch nicht gefunden )
  LFA @ 
  SMUDGEBIT @ IF DUP @ + END_IF
  BEGIN
    DUP 1+ DUP @ ( lfa nfa adr
    SWAP 1+ @ ( lfa adr n1 )
    ( 2DUP CR B. 2DUP TYPE
    ( BEGIN 2DUP + 1 - C@ 0= WHILE 1 - REPEAT ( ??? momentan nicht)
    R> R> 2DUP >R >R ( 0 lfa adr1 n1 adr2 n2 )
    Z= IF SWAP 0= SWAP END_IF ( heisst gefunden )
    OVER 0= OVER @ 0= NOT AND 
    OVER DUP @ + LFA @ = NOT AND WHILE ( wegen 2xladen
      DUP @ + REPEAT
  R> DROP R>
  ROT 0= IF DROP DROP 0 0 END_IF
  ;

: LCFA ( lfa r --> cfa r )
  SWAP 3 + SWAP ;

: COMPILE, ( adr --> )
  RBIT @ IF 4000 ELSE 
    DP @ 1+ - 0FFF AND 3000 END_IF
    0000 + + , ;

: CREATE ( <name>  --> )
  CSP! ( Stapelbalance prüfen in ; )
  DP @ LFA @ OVER - , LFA !
  20 WORD Z,
  1 SMUDGEBIT ! ( HERE 2 - DUP @ MINUS SWAP ! ( UNSMUDGE )
  ;

: INTERPRET ( adr n --> ... )
  IN1 @ >R IN2 @ >R IN3 @ >R IN4 @ >R
  OVER + IN4 !
  DUP IN1 ! DUP IN2 ! IN3 !
  BEGIN
  ( ... qstack? Stapelpruefen )
  20 WORD
  DUP WHILE
    2DUP FIND 
    DUP IF ( gefunden
      >R >R 2DROP R> R> LCFA DROP EXECUTE
      ELSE ( nicht gefunden
        2DROP
        2DUP NUMBER IF ( keine Zahl )
          2DROP DROP
          3 ERROR
         ( DROP BNUMBER
         ( DUP IF DUP IN2 ! END_IF
         ( IF 3 ERROR END_IF
         ( STAT @ IF SWAP LIT, LIT, END_IF
          ELSE ( eine Zahl )
            ROT DROP SWAP DROP
            STAT @ IF LIT, END_IF ( oo LIT, fuer gr )
            END_IF
        END_IF
    REPEAT 2DROP
  R> IN4 ! R> IN3 ! R> IN2 ! R> IN1 ! NOOP
  ;

: QUIT 
  RP0 @ RP !
  BEGIN 
    STAT @ 0= IF ." ok" END_IF CR 
    TIB @ 100 EXPECT INTERPRET 
    AGAIN ;

: START 
  0 BEGIN 1 + DUP 2D04 ! DUP 100 = UNTIL DROP ( für Anfangstest )
  BEGIN KEYCODE2 SWAP DROP 0= UNTIL ( warten bis RxD stabil 1 ) 
  ." FORTY-FORTH" CR CR QUIT ; ( und los gehts )

: SMUDGE 0 SMUDGEBIT ! ( LFA @ 1+ DUP @ DUP 0< IF MINUS END_IF SWAP ! ) ;

: (IMMEDIATE:) R> >R ;
:   (COMPILE:) R> COMPILE, ;
:          (:) R> STAT @ IF COMPILE, ELSE >R END_IF ;

: IMMEDIATE: CREATE 1 STAT ! COMPILE (IMMEDIATE:) ;
:   COMPILE: CREATE 1 STAT ! COMPILE (COMPILE:) ;
:          : CREATE 1 STAT ! COMPILE (:) ;

( das hier jetzt mit dem neuen CREATE:
IMMEDIATE: ; 0 STAT ! CSP? A003 , SMUDGE [ SMUDGE ] ; 
( tatsaechlich [ SMUDGE ] wegen 2x laden!!! 
( Ende der Axiome. Hiermit enden die Axiome.

0 DPMERK @ ! ( abkoppeln
0 CRBIT ! VERSION .




-1 CRBIT !
( erste Forth Erweiterung: Erzeugung .mem File

: LG. ( n -->  <byte>) SHL16 DROP SHL16 DROP SHL16 DIG EMIT SHL16 DIG EMIT DROP ;
: DUMPL ( bis+1 von --> ) BEGIN CR DUP @ HG. 1+ 2DUP = UNTIL CR ;
: DUMPB ( bis+1 von --> ) BEGIN CR DUP @ LG. 1+ 2DUP = UNTIL CR ;

( ' START 4000 + DUP . 0 ! 8FFE 1 !
( HERE 0000 DUMPL 
( BZEIG @ E000 DUMPB
( 3000 2C00 DUMPL




0 CRBIT !
HERE . BZEIG ?
( HERE 0000 0 DUMPZ CR BZEIG @ E000 -1 DUMPZ CR 3000 2C00 0 DUMPZ
CR ." ( " HERE . ." DP ! " BZEIG ? ." BZEIG ! " LFA ? ." LFA ! " CR

START
